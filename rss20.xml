<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>inforno</title>
    <link>http://inforno.net/</link>
    <description>information &#43; inferno ... inforno</description>
    <copyright>Yusuke Inuzuka</copyright>
    
    
    <lastBuildDate>24 Dec 19 17:22 UTC</lastBuildDate>
    
    <generator>silkylog</generator>
    
    
    <item>
      <title>goldmarkがHugoに採用された </title>
      <link>http://inforno.net/articles/2019/12/25/hugo-now-uses-goldmark</link>
      <description>&lt;p&gt;ちょっと前の話ですが、&lt;a href=&#34;http://github.com/yuin/goldmark&#34;&gt;goldmark&lt;/a&gt;が
&lt;a href=&#34;https://gohugo.io/news/0.60.0-relnotes/&#34;&gt;HugoのMarkdownレンダラーに採用されました&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;(しかし、このブログはHogoではなく独自のプログラムで生成されているのであった…)&lt;/p&gt;

&lt;p&gt;やっぱりblackfridayに対する不満というのはGo界隈ではそこそこあったんだなあ、というのと
単純にこう、自分の書いたコードが評価されるっていうのはうれしいし自信につながりますね。&lt;/p&gt;

&lt;p&gt;柔軟な拡張性を担保しつつ、CommonMark仕様を実装するというのは実はかなり難易度が高くこれを
実現しているライブラリは多言語ふくめてもそれほどないので頑張ってよかったなあと。&lt;/p&gt;

&lt;p&gt;本当はGoのAdventカレンダーで実装の詳細やパフォーマンスチューニングの話など書こうかなと
思ってたんですけどあっという間に埋まってしまい。Adventカレンダー最終日のポエムです。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;2019年も終わりが近づいてますが、まだ自分の書くコードは世界にある程度通用するなあ、という
自信も得られたので来年こそは転職活動に本腰を入れて、もう一度ソフトウェアエンジニアとして
勝負してみたいなあ、と思っております。仕事でGo書きたいほんとに。&lt;/p&gt;

&lt;p&gt;話だけでも聞いてみたいなーというのはいろいろあるんですけど、そういうの、雇う側からすると
冷やかしちっくでやっぱり嫌なものなんですかね。
冷やかしでもいいよーとか、よい話があればGithubにあるメアドなりに連絡ください笑&lt;/p&gt;

&lt;p&gt;メリークリスマス。
よいお年を。&lt;/p&gt;
</description>
      
      <category>golang</category>
      
      <category>goldmark</category>
      
      <guid isPermaLink="true">http://inforno.net/articles/2019/12/25/hugo-now-uses-goldmark</guid>
      <pubDate>24 Dec 19 17:22 UTC</pubDate>
    </item>
    
    <item>
      <title>Go言語でCommonMarkパーサを実装した、またCommonMarkについて </title>
      <link>http://inforno.net/articles/2019/04/27/commonmark-parser-written-in-go</link>
      <description>&lt;p&gt;GoでCommonMarkのパーサを実装しました。&lt;/p&gt;

&lt;p&gt;&lt;div data-theme=&#34;default&#34; data-height=&#34;150&#34; data-width=&#34;400&#34; data-github=&#34;yuin/goldmark&#34; class=&#34;github-card&#34;&gt;&lt;/div&gt;&lt;script src=&#34;http://lab.lepture.com/github-cards/widget.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;分かりやすいASTに変換＋拡張が容易、そこそこ速い実装になっています。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;めちゃくちゃしんどかったです。&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;経緯&lt;/h2&gt;

&lt;p&gt;Go言語のMarkdownパーサといえば&lt;a href=&#34;https://github.com/russross/blackfriday/tree/v2&#34;&gt;blackfriday&lt;/a&gt;ですが、
拡張するための機構がないのでさくっと自前でMarkdownパーサを書くか、と思い立ちました。&lt;/p&gt;

&lt;p&gt;そこで「そういえばCommonMarkなんてもんがあったな」と思い出しせっかくならCommonMark準拠にするかと
おもってCommonMarkの仕様を読み始めました。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;え、なにこれは…&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Markdownで出来ることなんてrestructuredTextなどほかのマークアップ言語に比べれば
わずかなものです。しかし、たかがそれだけを実装するために凄まじく複雑な仕様
が定義されているのでした。&lt;/p&gt;

&lt;p&gt;以下、CommonMarkに寄せられた声です。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;commonmarkのlistの仕様複雑すぎて死んでいる&lt;/p&gt;&amp;mdash; tkr (@kgtkr) &lt;a href=&#34;https://twitter.com/kgtkr/status/1111140801621286913?ref_src=twsrc%5Etfw&#34;&gt;2019年3月28日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;う〜ん、CommonMark難しすぎる！w&lt;/p&gt;&amp;mdash; らぃと (@lightnet328) &lt;a href=&#34;https://twitter.com/lightnet328/status/1099352824750587909?ref_src=twsrc%5Etfw&#34;&gt;2019年2月23日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;質問：&lt;br&gt;CommonMarkのパーザの実装を試みていますが、仕様が絶望的です。どうしたらいいでしょうか？&lt;br&gt;&lt;br&gt;回答：&lt;br&gt;もっとテキトーにパーザを実装して、そのパーザの動作を以て“新しいMarkdown方言”であると定めましょう！&lt;a href=&#34;https://twitter.com/hashtag/Markdown?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#Markdown&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/%E3%81%86%E3%82%8F%E3%81%81?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#うわぁ&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/%E3%81%86%E3%82%8F%E3%81%81?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#うわぁ&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/%E3%81%86%E3%82%8F%E3%81%81?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#うわぁ&lt;/a&gt;&lt;/p&gt;&amp;mdash; ZR-TeXnobabbler🤔 (@zr_tex8r) &lt;a href=&#34;https://twitter.com/zr_tex8r/status/1057951517859209217?ref_src=twsrc%5Etfw&#34;&gt;2018年11月1日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;皆さんには是非 CommonMark Spec を読んで絶望してほしい．&lt;/p&gt;&amp;mdash; 画力・博士号・油田 (@bd_gfngfn) &lt;a href=&#34;https://twitter.com/bd_gfngfn/status/1057689153561710592?ref_src=twsrc%5Etfw&#34;&gt;2018年10月31日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;しまいには、CommonMarkの中心人物自体が「えらいもん作ってしまった・・・」となっています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://talk.commonmark.org/t/beyond-markdown/2787&#34;&gt;Beyond Markdown&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;There are 17 principles governing emphasis , for example, and these rules still
leave cases undecided. The rules for list items and HTML blocks are also
very complex. All of these rules lead to unexpected results sometimes, and they
make writing a parser for CommonMark a complex affair.
I despair, at times, of getting to a spec that is worth calling 1.0.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;私も仕様を読んだ段階で「これはヤバい」と感じたのですがここで引くのも悔しかったので作り切りました。&lt;/p&gt;

&lt;h2&gt;CommonMarkについて思うところ&lt;/h2&gt;

&lt;p&gt;正直なところ、これが世に広まるってどうなの、と思います。&lt;/p&gt;

&lt;p&gt;そもそもなんでMarkdownが軽量マークアップ言語の中でこれだけ広く使われるようになったのかというと&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;書き手としての書きやすさ&lt;/li&gt;
&lt;li&gt;実装者としての実装しやすさ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;つまり、「書き手の適当さ」と「実装側の適当さ」がいい具合に噛み合ったからだと思っています。
書き手はそれなりに適当に書けるし、実装するにしても仕様が適当なので、適当に実装してもMarkdown
対応であると言うことができました。&lt;/p&gt;

&lt;p&gt;それによってあらゆる言語、さまざまなタイプの実装が生まれそれが至るところで使われることになり
Markdownは広まっていったのです。&lt;/p&gt;

&lt;p&gt;それに対して、CommonMarkはあまりに実装するのがしんどすぎます。さらにはそれだけしんどい思いを
しても出来ること自体は少ないのです。テーブルさえ使えないのです。&lt;/p&gt;

&lt;p&gt;その実装の難しさからCommonMark対応のパーサはいわゆるMarkdownパーサと比べるとわずかしかありません。
CommonMarkにかかわっている人の中には「それが何の問題ですか？」という人さえいます。
「CとJSで参照実装提供してるじゃん。ブラウザはC動かないからJSも用意してある。それ以外の言語は
C実装のバインディング作ればいいだけでしょ。実装なんて1個あればいいんだよ」なんて感じです。&lt;/p&gt;

&lt;p&gt;CommonMarkはオリジナルのMarkdown作者から「Markdownの名前は使うな」と言われてCommonMarkという名前
になったという経緯があります。&lt;/p&gt;

&lt;p&gt;Markdownを冠していないのであれば、perlの神正規表現で実装されたオリジナルのMarkdown.plの動きにでき
るだけ寄せようとするのではなく、もっと仕様をシンプルにする方向に動いて欲しかったです。&lt;/p&gt;

&lt;h2&gt;CommonMarkパーサを実装したい人に向けて&lt;/h2&gt;

&lt;p&gt;とにかく、CommonMarkに準拠するのは難しい。ということでいるかいないかわからない、CommonMarkパーサを
これから書こうと言う人に気づきを共有しておきます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;いわゆるプログラミング言語やXML, JSONなどのパースとは全く別物です。そういうものはもともと
「パースしやすいように」という視点で文法が作られてますが、CommonMarkはそんなことはありません。
pegベースのパーサもあるので無理じゃないですがいわゆるLL,LRやLALRのような方法では厳しいです。&lt;/li&gt;
&lt;li&gt;Markdownはいうなれば「行志向」なので業単位を基本としましょう。&lt;/li&gt;
&lt;li&gt;「lazy continuation」はかなり曲者です。&lt;/li&gt;
&lt;li&gt;仕様策定者自身が &lt;a href=&#34;https://talk.commonmark.org/t/beyond-markdown/2787&#34;&gt;Beyond Markdown&lt;/a&gt; で述べている
部分は間違いなくしんどいです。特に強調は自分で考えるのは諦めましょう。素直に参照実装と同じ
アルゴリズムで実装するより他にspec testを通すのは難しいです。&lt;/li&gt;
&lt;li&gt;タブが本来のタブの意味でつかわれる点に注意。つまりタブ文字の位置によりタブは
1文字分、2文字分、3文字分、4文字分、いずれの文字幅にもなりえます。&lt;/li&gt;
&lt;li&gt;とにかく折れない心が大事です。CommonMarkとMarkdownは別物です。覚悟してかかりましょう。&lt;/li&gt;
&lt;/ul&gt;
</description>
      
      <category>golang</category>
      
      <category>commonmark</category>
      
      <category>markdown</category>
      
      <category>parser</category>
      
      <guid isPermaLink="true">http://inforno.net/articles/2019/04/27/commonmark-parser-written-in-go</guid>
      <pubDate>26 Apr 19 16:50 UTC</pubDate>
    </item>
    
    <item>
      <title>batの中にbashスクリフﾟトを埋め込む方法 </title>
      <link>http://inforno.net/articles/2017/02/15/bash-script-in-bat</link>
      <description>&lt;p&gt;相変わらずメインのマシンはWindowsなのですが、batファイルのもろもろがいつまでも覚えられず、bashスクリプトで書きたいなあ、ということでbatファイルにbashスクリプトを埋め込むことにしました。 Cでつくった自作用ツールがあるため、Windowsにはかならずmsys2をいれているのでbashは絶対あるんですよね。&lt;/p&gt;

&lt;p&gt;その他の言語を埋め込む方法は&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/snipsnipsnip/items/50e4ca88e3ce3f8cffda&#34;&gt;Windowsでshebangもどき、またはバッチにスクリプトを埋め込む方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;が詳しいです。&lt;/p&gt;

&lt;h1&gt;シェルスクリプトをバッチファイルに埋め込む&lt;/h1&gt;

&lt;p&gt;以下のようにすると、バッチファイルにシェルスクリプト(bashスクリプト)を埋め込むことにできます。拡張子 &lt;code&gt;.bat&lt;/code&gt; で保存すると &lt;code&gt;cmd.exe&lt;/code&gt; からもmsys2の &lt;code&gt;bash.exe&lt;/code&gt; からも起動できます。&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;&lt;code&gt;:rem () { &amp;lt;&amp;lt;&#39;#__CO__&#39;
@bash  &amp;quot;%~f0&amp;quot; %* &amp;amp; exit /b
#__CO__
}

echo 以下普通にシェルスクリプト
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;仕組みはバッチファイルのコメントやら、bashのヒアドキュメントやら、&lt;code&gt;:&lt;/code&gt; コマンドやらをうまく利用して埋め込んでいます。&lt;/p&gt;
</description>
      
      <category>bash</category>
      
      <category>bat</category>
      
      <guid isPermaLink="true">http://inforno.net/articles/2017/02/15/bash-script-in-bat</guid>
      <pubDate>14 Feb 17 16:25 UTC</pubDate>
    </item>
    
    <item>
      <title>Go1.8のpluginパッケージでGopherLuaに共有ライブラリロードを実装してみた </title>
      <link>http://inforno.net/articles/2016/12/16/gopher-lua-plugins-in-go18</link>
      <description>&lt;p&gt;&lt;a href=&#34;http://qiita.com/advent-calendar/2016/go&#34;&gt;Go Advent Calendar 2016&lt;/a&gt; 16日目です。去年に引き続き今年も3つカレンダーがあり相変わらずの人気ですね。&lt;/p&gt;

&lt;p&gt;さて、Go1.8では待望？のShared Libraryのロードが可能になります。 &lt;a href=&#34;https://tip.golang.org/pkg/plugin/&#34;&gt;pluginパッケージ&lt;/a&gt; を使います。&lt;/p&gt;

&lt;p&gt;Go1.8beta1ではLinuxとMacOSがサポートされていたのですが、MacOSで問題が見つかりbeta2ではLinuxのみで利用可能な機能となります。&lt;/p&gt;

&lt;p&gt;Advent Calendar 2の &lt;a href=&#34;http://qiita.com/qt-luigi/items/47a7913145fc747da0c7&#34;&gt;qt-luigiさんのネタ&lt;/a&gt; と被ってしまったのですが実戦的に使ってみました、ということで許してください。&lt;/p&gt;

&lt;h1&gt;プラグインの作成とコンパイル&lt;/h1&gt;

&lt;p&gt;マニュアルページにあるとおり、以下のようになります。&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;&lt;code class=&#34;language-go&#34;&gt;package main

// // No C code needed.
import &amp;quot;C&amp;quot;

import &amp;quot;fmt&amp;quot;

var V int

func F() { fmt.Printf(&amp;quot;Hello, number %d\n&amp;quot;, V) }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ポイントは&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cのコードはないが、 &lt;code&gt;import &amp;quot;C&amp;quot;&lt;/code&gt; が必要&lt;/li&gt;
&lt;li&gt;&lt;code&gt;package&lt;/code&gt; は &lt;code&gt;main&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という２点です。コンパイルは&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;$ go build -buildmode=plugin -o plugin.so plugin.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でOK。簡単ですね。これで &lt;code&gt;plugin.so&lt;/code&gt; が生成されます。&lt;/p&gt;

&lt;h1&gt;プラグインのロード&lt;/h1&gt;

&lt;p&gt;これまたマニュアルページどおりですが&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;&lt;code class=&#34;language-go&#34;&gt;p, err := plugin.Open(&amp;quot;plugin.so&amp;quot;)
if err != nil {
    panic(err)
}
v, err := p.Lookup(&amp;quot;V&amp;quot;)
if err != nil {
    panic(err)
}
f, err := p.Lookup(&amp;quot;F&amp;quot;)
if err != nil {
    panic(err)
}
*v.(*int) = 7
f.(func())() // prints &amp;quot;Hello, number 7&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように非常に直感的に使えます。&lt;/p&gt;

&lt;h1&gt;GopherLuaで使ってみた&lt;/h1&gt;

&lt;p&gt;拙作のPure GoによるLua実装 &lt;a href=&#34;https://github.com/yuin/gopher-lua&#34;&gt;GopherLua&lt;/a&gt; ですが(何気にstarいっぱいでうれしいですね)、当然ながらC言語実装のように共有ライブラリをロードできませんでした。&lt;/p&gt;

&lt;p&gt;そのため、必要なライブラリはすべて事前に組み込んでおく必要がありました。そこでGo1.8で共有ライブラリロードを実装できるのか、実装できるだろうけどちゃんと動くのか、と思い試してみました。&lt;/p&gt;

&lt;p&gt;こちらは &lt;a href=&#34;https://github.com/yuin/gopher-lua/tree/feature-exp-go1.8plugins&#34;&gt;feature-exp-go1.8pluginsブランチ&lt;/a&gt; で実際に動かせます。プラグイン部分のコミットは &lt;a href=&#34;https://github.com/yuin/gopher-lua/commit/571b031ebefafde258037fa84fc1ff6c6f12227b&#34;&gt;571b031&lt;/a&gt; です。&lt;/p&gt;

&lt;p&gt;まずプラグイン側から。Luaのお作法通りです。&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
    &amp;quot;C&amp;quot;
    &amp;quot;github.com/yuin/gopher-lua&amp;quot;
)

func Add(L *lua.LState) int {
    v1 := L.CheckInt(1)
    v2 := L.CheckInt(2)
    L.Push(lua.LNumber(v1 &#43; v2))
    return 1
}

func LuaOpenPlugin(L *lua.LState) int {
    L.Push(
        L.SetFuncs(L.NewTable(), map[string]lua.LGFunction{
            &amp;quot;add&amp;quot;: Add,
        }))
    return 1
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;C実装のLuaでは &lt;code&gt;luaopen_共有ライブラリファイル名&lt;/code&gt; が実行されるのですがそこはGoの命名規則に合わせました。違いはそれくらいですね。&lt;/p&gt;

&lt;p&gt;こいつをコンパイルして・・・&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd /home/yuin/tmp/plugin
$ go build -buildmode=plugin -o plugin.so plugin.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こうじゃ&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;&lt;code&gt;$ glua
&amp;gt; package.cpath = package.cpath .. &amp;quot;;&amp;quot; .. &amp;quot;/home/yuin/tmp/plugin/?.so&amp;quot;
&amp;gt; adder = require(&amp;quot;plugin&amp;quot;)
&amp;gt; print(adder.add(1, 2))
3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;おおおおおおおおおおおおお&lt;/p&gt;

&lt;p&gt;普通に動きますね。素晴らしい。ちなみに、「ロードする側」と「ロードされる側(すなわちプラグイン)」のバージョンが違うと以下のようにエラーになります。この判定が結構厳しいので（プラグインが参照していない部分の更新でもダメっぽい）、事前にプラグインをコンパイルしておいて配布、は難しいのではないでしょうか。&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;&lt;code&gt;&amp;lt;string&amp;gt;:1: plugin.Open: plugin was built with a different version of package github.com/yuin/gopher-lua
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;package.loadlib&lt;/code&gt; も実装しました。&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;&lt;code&gt;$ glua
&amp;gt; print(package.loadlib(&amp;quot;/home/yuin/tmp/plugin/notfound&amp;quot;, &amp;quot;foo&amp;quot;))
nil plugin.Open(/home/yuin/tmp/plugin/notfound): realpath failed    open
&amp;gt; print(package.loadlib(&amp;quot;/home/yuin/tmp/plugin/plugin.so&amp;quot;, &amp;quot;foo&amp;quot;))
nil plugin: symbol foo not found in plugin plugin/unnamed-16c3f13f46f4b66b64ad316d78cd61078d12ac64  init
&amp;gt; print(package.loadlib(&amp;quot;/home/yuin/tmp/plugin/plugin.so&amp;quot;, &amp;quot;LuaOpenPlugin&amp;quot;))
function: 0xc4200c9840
&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;完璧ですね。&lt;/p&gt;

&lt;h1&gt;pluginパッケージ、使えそうですが・・・&lt;/h1&gt;

&lt;p&gt;少なくとも、Linuxでは &lt;code&gt;plugin&lt;/code&gt; パッケージは使えそうです。ただし、本体と共有ライブラリのコンパイル時、完全にバージョンを合わせる必要があるところが難しそう。&lt;/p&gt;

&lt;p&gt;Goの大きなメリットである単一バイナリ配布や、クロスコンパイルと相性は悪いですがうまく使っていければいいなと思います。&lt;/p&gt;
</description>
      
      <category>golang</category>
      
      <category>lua</category>
      
      <guid isPermaLink="true">http://inforno.net/articles/2016/12/16/gopher-lua-plugins-in-go18</guid>
      <pubDate>16 Dec 16 12:10 UTC</pubDate>
    </item>
    
    <item>
      <title>Go&#43;Luaのチャットボットフレームワークを作った </title>
      <link>http://inforno.net/articles/2016/07/28/golbot</link>
      <description>&lt;p&gt;たまには実用的なものをつくろうと思って、Go&#43;Luaで置くだけで動くチャットボットを作ってみました。Slack, IRC, Hipchatをサポートしています。&lt;/p&gt;

&lt;p&gt;&lt;div data-theme=&#34;default&#34; data-height=&#34;150&#34; data-width=&#34;400&#34; data-github=&#34;yuin/golbot&#34; class=&#34;github-card&#34;&gt;&lt;/div&gt;&lt;script src=&#34;http://lab.lepture.com/github-cards/widget.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;チャットボットといえばHubotだと思いますが、もっとさくっと動かしたいという方におすすめです。置けばうごきます。&lt;/p&gt;

&lt;p&gt;特徴は以下です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Goなので置けば動く&lt;/li&gt;
&lt;li&gt;それでいてLuaでスクリプトを書ける&lt;/li&gt;
&lt;li&gt;最初からマルチスレッド(複数goroutine)を考慮している&lt;/li&gt;
&lt;li&gt;HTTP(S)サーバ機能があるのでWEBHOOKも一緒に作れる&lt;/li&gt;
&lt;li&gt;定期ジョブも流せる&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;&lt;code class=&#34;language-lua&#34;&gt;function main()
  local bot = golbot.newbot(&amp;quot;Slack&amp;quot;, { token = &amp;quot;xxxxx&amp;quot; })

  bot:respond([[\s*(\d&#43;)\s*\&#43;\s*(\d&#43;)\s*]], function(m, e) -- 3
    bot:say(e.target, tostring(tonumber(m[2]) &#43; tonumber(m[3])))
  end)

  bot:serve(function(msg)
    if msg.type == &amp;quot;say&amp;quot; then
      bot:say(msg.channel, msg.message)
      respond(msg, true)
    end
  end)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな感じのよくあるAPIです。特徴的なのがworkerの仕組みで&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;&lt;code class=&#34;language-lua&#34;&gt;function main()
  bot:respond([[deploy]], function(m, e)
    bot:say(e.target, &amp;quot;accepted&amp;quot;)
    goworker({target=e.target, type=&amp;quot;deploy&amp;quot;})
  end)

  bot:serve(function(msg)
    if msg.type == &amp;quot;say&amp;quot; then
      bot:say(msg.target, msg.message)
    end
  end)
end

function worker(msg)
  if msg.type == &amp;quot;deploy&amp;quot; then
    do_deploy()
    notifymain({type=&amp;quot;say&amp;quot;, target=msg.target, message=&amp;quot;your deployment has been completed&amp;quot;})
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このように &lt;code&gt;goworker&lt;/code&gt; でLuaからGoroutineをつくって重い処理などをWorkerで実行することができます。Workerからは &lt;code&gt;notifymain&lt;/code&gt; でメインGroutineにメッセージをおくることができます。&lt;/p&gt;

&lt;p&gt;HTTPサーバ機能では以下のような関数を定義するだけで簡単にWEBHOOKが作れます。&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;&lt;code class=&#34;language-lua&#34;&gt;function http(r)
  if r.method == &amp;quot;POST&amp;quot; and r.URL.path == &amp;quot;/webhook&amp;quot; then
    local data = assert(json.decode(r:readbody()))
    local message = data.item.message.message
    local user = data.item.message.from.name
    local room = data.item.room.name

    local ret = {
      message = &amp;quot;hello! from webhook&amp;quot;,
      message_format = &amp;quot;html&amp;quot;
    }

    return 200, headers, json.encode(ret)
  end
  return 400, headers, json.encode({result=&amp;quot;not found&amp;quot;})
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;定期ジョブは以下のような感じ。&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;&lt;code class=&#34;language-lua&#34;&gt;function main()
  golbot.newbot(&amp;quot;Null&amp;quot;, { 
    http = &amp;quot;0.0.0.0:6669&amp;quot; ,
    crons = {
      { &amp;quot;0 * * * * * &amp;quot;, &amp;quot;job1&amp;quot;}
    }
  }):serve(function() end)
end

function job1()
  print &amp;quot;hello!&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;チャットボットのためだけにNode.jsとnpmはちょっと・・・という場合にぜひ。&lt;/p&gt;
</description>
      
      <category>golang</category>
      
      <guid isPermaLink="true">http://inforno.net/articles/2016/07/28/golbot</guid>
      <pubDate>28 Jul 16 11:32 UTC</pubDate>
    </item>
    
  </channel>
</rss>
